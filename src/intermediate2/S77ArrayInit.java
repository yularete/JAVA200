package intermediate2;
import java.util.Arrays;
public class S77ArrayInit {
    public static void main(String[] args) {
        //기본 타입의 배열 사용 방법 1 선언
        int[] a; // 동적 배열을 선언한다. 아직 생성이나 초기화를 하지 않아 사용할 수 없다. new로 생성하는 동적 배열은 선언, 정의(생성), 초기화를 한번에 하거나 따로 할 수 있다.
        //a ={1,2,3}; //선언하면서 초기화할 때만 사용... 정적 배열은 선언과 함께 초기화를 할 수 있다. 선언만 할 수 없다.
        //정의
        a = new int[5]; //5개의 요소(엘리먼트)를 갖는 동적 배열을 정의(생성)한다. 자동으로 0에 관련된 수로 초기화된다.
        //초기화
        a[0] = 2; a[1] = 5; a[2] = 3; a[3] = 9; a[4] = 8; //배열값을 초기화 한다.
        //방법2 선언 정의 초기화
        int[] b = new int[]{2, 5, 3, 9, 8}; // 선언, 정의(생성), 초기화를 한번에 한다.
        //방법3 선언 (정의) 초기화
        int[] c = {2, 5, 3, 9, 8}; //new를 이용하지 않고 생성한 배열을 정적 배열이라고 한다. 정적 배열은 선언과 함께 초기화 할 수 있다. length(크기)는 5
        // 다시 대입 불가(다시 초기화 불가)
        //c={2,5,3,9}; //정적 배열은 다시 초기화 할 수 없다.
        int[] e = new int[5]; //int 타입 5개를 갖는 배열을 생성한다. 모두 0으로 초기화한다.
        Arrays.fill(e, -1); //5개를 모두 -1로 초기화한다.
        System.arraycopy(c, 0, e, 0, c.length); //Deep Copy.. c배열 0번째부터 5개를, e배열 0~5개를 저장한다.
        Arrays.sort(e); // 증가순으로 정렬한다.
        print(e); //배열 e를 출력한다.
        e = new int[]{1,2,3,4,5,6}; //동적 배열 e를 다시 초기화 한다.
        print(e);
        int index = Arrays.binarySearch(e, 5); // e배열에서 5가 있는 위치를 찾는다. e에서 5는 4(0부터 시작)에 있다.
        System.out.println(index);
    } //e배열에서 5가

    public static void print(int[] a) {
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i] + "\t");
        }
        System.out.println();
    }
}
/*
배열은 같은 타입의 나열이다. 같은 타입 a, b, c, d, e 변수 5개를 선언하여 사용하는 것보다 하나의 이름으로 인덱스를 사용하면 편리하다.
예를 들어 a,b,c,d,e 대신 num[0], num[1], num[2], num[3], num[4]로 사용하면 편리하다.

배열은 new로 생성하는 동적 배열과 사용 않는 정적 배열로 나눌 수 있다.
동적 배열과 정적 배열의 사용 방법은 같으나 선언 방법이 다르다.
정적 배열은 int[] num = {1,2,3};으로 선언한 후 다시 num ={1,2};처럼 초기화할 수 없다.
동적 배열은 필요할 때마다 다시 초기화 할 수 있다.
*/